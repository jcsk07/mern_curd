----------------------CONNECTING TO THE MONGODB--------------------

type the following command in the command prompt in the project folder:-
		npm install --save mongoose

open the index.js file and type the following commad:-

var mongoose=require('mongoose');							//used to connect the mongodb 
mongoose.connect('mongodb://localhost/my_db_crud', { useNewUrlParser: true });	//used to connect the mongodb databes 
						`														named:"my_db_crud"


-------------------CREATING A SCHEMA------------------------------

Schema is a collection format in which we can define the fields and with their respective datatypes

the syntax for creating a schema is as follows:-
	var variable = new mongoose.Schema({
		field_name : datatype;
	});

The permitted SchemaTypes are:

String
Number
Date
Buffer
Boolean
Mixed
ObjectId
Array
Decimal128
Map

the following is an example of the Schema we have created:-

var studentSchema = new mongoose.Schema({  //we are creating the Schema of collection with different fields
	sn0:Number,
	textnames : String,
	fathername : String,
	sex : String,
	City : String,
	emailid : String,
	mobileno : String 
});

-----------------------CREATING THE MODEL(COLLECTION) IN MONGODB-------------
//To create the Collection we use model in the mongoose.model("model_name",Schema)

var stdetails = mongoose.model('stdetails', studentSchema);

//The above code defines the schema for a student and is used to create a Mongoose Mode stu_details.

db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
  console.log("connected to mongodb my_db_crud");
});


------------------------INSERTING THE DATA INTO COLLECTION USING POST REQUEST--------------

//WE ARE PLACING THE POST METHOD IN THIS AND ALSO INSERTING THE DATA TO THE COLLECTION
//to insert a particula unique number to the users we should use anothe collection named "counter"


//we are creating a Schema for the count the no of users and also giving a unique number "sno"
var counterSchem = new mongoose.Schema({
	name: String,
	sno: Number
});
//creating a collection named counters 
var counter = mongoose.model('counters', counterSchem);
//the above one is to place a counter variable

app.post('/studentform',async(req,res)=>{  //these are the asynchronous fuctions used 
	var person = req.body; //taking the json data into the person
	counter.update({name:'count'},{$inc:{sno:1}},function(err,doc){ //incrementing count value by one 
		if(err)
			res.send('failed');
		else
			console.log('post success with increment');
	});
	var fi = await counter.find({name:'count'});//sending the finda json data to fi
	var x= fi[0].sno; //assigning the sno value from fi[0] index to "x" variable
	x = parseInt(x);
	var y = Number(x);//converting into number and saving iot to the "y"
	var stu = new stdetails({
		sno : y,//assigning the unique sno by placing the "y"
		textnames : person.textnames,
		fathername : person.fathername,
		sex : person.sex,
		City: person.City,
		emailid : person.emailid,
		mobileno : person.mobileno
	});
	stu.save(function(err,st){  //saving the stu details into the stdetails collection
		if(err)
			res.send('failed to insert');
		else
			res.send('inserted successfully');
	});
	console.log(y);
}); 
 

---NOTE:-
	we should use the "save" for the Schema data in order to insert the data into collestion

--------------------READING THE DATA FROM THE MODEL(COLLECTION) IN DATABASE AND PRINTING IT IN  THE SCREEN-----------
								-------------USING GET REQUEST-----------

we use the collection_name.find() option in order to select the data
the synatx is that "
collection_name.find({field1:value,field2:value},'field1 field2 field3',function(err,docs){
	res.json(docs); //we are sending the json data in form of response
});
note:-
In above the field1 field2 field3 are the fields to be returned and displayed

1)model.find();
2)model.findOne();

3)Model.findById(id, function (err, doc) {
  if (err) ..
  doc.name = 'jason bourne';
  doc.save(callback);
});

4)model.findOneAndUpdate();


so we also have another functions such as:-
model.

app.get('/retrive',function(req,res){
	stdetails.find(function(err,response){
		res.json(response);
	});
});


----------------------------------UPDATING THE DOCUMENTS------------------------

to update the documents we use the following syntax:-

	model.update(conditions,update,functions);

the following is an example of that:-
//---------------------UPDATING THE DOCUMENTS----------------------
var up; //creating a variable for the saving of the selection of document which you want to replace
var dat; //creatin a variable to store the updates values in it.

app.get('/update',function(req,res){  //it shows the form to select the document based on the parameters
	res.sendFile(path.join(__dirname + '/html_pages/update_form1.html'));
});

//The action from the update_form.html is sent as post request to the "/updateform" 

app.post('/updateform',function(req,res){ 
	up=req.body; //assigning the json data to "up" for finding the document
	res.sendFile(path.join(__dirname + '/html_pages/update_form2.html')); //this is to redirtedt to the updation form
});

//the action from the update_form2.html is send as a post request for the "/completeupdate"

app.post('/completeupdate',function(req,res){
	dat=req.body; //the dat consist of the updated json data
	stdetails.update({textnames:up.textnames},{$set:{
		fathername:dat.fathername,
		emailid:dat.emailid,
		mobileno:dat.mobileno
	}},function(err,response){
		if(err)
			res.send('Failed');
		else{
			console.log("SUCCESSFULLY UPDATED");
			res.send('SUCCESSFULLY UPDATED');

		}
	});
});

//in above the {textnames:up.textnames} is the data for finding the documents 
//The {$set:{fathername:dat.fathername,..}} are the data in the fields of dat to update the values of the document

//In above the stdetails is the name of the model or the collection name

--------------------------DELETING THE DOCUMENTS -------------------

Following are the ways on model object you can do any of the following to remove document(s):

yourModelObj.findOneAndRemove(conditions, options, callback)
yourModelObj.findByIdAndRemove(id, options, callback)

yourModelObj.remove(conditions, callback);

var query = Comment.remove({ _id: id });
query.exec();


Models have static deleteOne() and deleteMany() functions for removing all documents matching the given filter.

Tank.deleteOne({ size: 'large' }, function (err) {
  if (err) return handleError(err);
  // deleted at most one tank document
});
EXAMPLE:-

app.get('/delete',function(req,res){ //redirecting to the html page
	res.sendFile(path.join(__dirname + '/html_pages/delete_form.html'));
});

//This is to delete only one document

app.post('/delete',function(req,res){  //getting the post request and savind the body into the del
	var del = req.body;

	//to delete only one matched document
	stdetails.deleteOne({emailid:del.emailid,mobileno:del.mobileno},function(err,response){
		if(err)
			res.send('Failed to delete the documnent');
		else
			res.send('DELETION SUCCESSFULLY COMPLETED');
	}); // in above we use the {emailid:del.emailid,mobileno:del.mobileno} to select the document to delete
});

//todelete every matched documents we use the following exampls:-

	stdetails.remove({emailid:del.emailid,mobileno:del.mobileno},function(err,response){
		if(err)
			res.send('Failed to delete the documnent');
		else
			res.send('DELETION SUCCESSFULLY COMPLETED');
	});

